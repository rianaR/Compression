%%
% 26/10/2015
% TD4 Video Processing
close all;

%*********************************************************************************************
% Here we'll try to reconstruct imgd1 with imgd2 

BLOCK_SIZE = 16;

disp('Loading images...');

reader = VideoReader('videos/planes.mp4');
video = read(reader, [1 10]);

for i=1:10
    imgd = video(:,:,:,i);
    imgd = imgd1(1:1080, 100:227);
end


imgd1 = video(:,:,:,1);
size(imgd1)
imgd1 = imgd1(1:1080, 100:227);
%imwrite(imgd1, 'videos/traffic.jpg');
imgd2 = video(:,:,:,2);
imgd2 = imgd2(30:157, 100:227);
%imwrite(imgd2, 'videos/traffic.jpg');
imgd3 = video(:,:,:,3);
imgd3 = imgd3(30:157, 100:227);
%imwrite(imgd3, 'videos/traffic.jpg');

disp('Converting to macroblocks...');
[macroblock, positions] = toMacroblocks(double(imgd1), BLOCK_SIZE);

disp('Compression...');

% Paramètre p permettant de calculer la largeur de la zone de recherche
param_p = 10;

[m,n] = size(imgd2);

%imgd3 est l'image que l'on va prédire
imgd3_recons = zeros(m,n);
% Loop de reconstruction d'imgd2
for i=1:size(macroblock,3)
    %Affichage de l'avancement du matching
    fprintf('%1.2f%% \n',i*100/size(macroblock,3));
    
    %Recupération du bloc et de sa position
    block = macroblock(:,:,i);
    pos = positions(:,:,i);
    coord_i = pos(1);
    coord_j = pos(2);
    
    
    [movement] = getBlockMovement(double(imgd2),param_p, block, coord_i, coord_j);
    block_temp = imgd2(coord_i:coord_i+BLOCK_SIZE-1, coord_j:coord_j+BLOCK_SIZE-1);
    new_coord_i = coord_i + movement(1);
    new_coord_i_block = min(new_coord_i+BLOCK_SIZE-1, m);
    new_coord_j = coord_j + movement(2);
    new_coord_j_block = min(new_coord_j+BLOCK_SIZE-1, n);

    imgd3_recons(new_coord_i:new_coord_i_block, new_coord_j:new_coord_j_block) = block_temp;
end

figure; imshow(uint8(imgd3_recons));
% Use the PSNR to measure the dirsotsion of the frame reconstructed

